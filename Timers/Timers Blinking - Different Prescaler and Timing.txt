// Global variable to keep track of the number of timer overflows
// Configuring a Timer with a prescaler of 64.
// Counting Frequency of Timer = 16,000,000 / 64 = 250,000[Hz]
// Timer2 is 8-bit. Hence it can store values between 0-255.
// This timer is expected to be "re-filled" at 250,000/256 = ~976[Per Second]
// for 0.5 seconds 976/2 = 488 
unsigned int timerCount = 0;

void setup()
{
  // Set pin 13 (PB5) as an output
  DDRB |= (1 << DDB5);
  
  // Disable interrupts
  cli();
  
  // Clear Timer2 control registers
  TCCR2A = 0;
  TCCR2B = 0;
  
  // Set Timer2 counter value to 0
  TCNT2 = 0;
  
  // Set Timer2 prescaler to 64
  TCCR2B |= (1 << CS22);
  
  // Enable Timer2 overflow interrupt
  TIMSK2 |= (1 << TOIE2);
  
  // Enable interrupts
  sei();
}

// Interrupt Service Routine (ISR) for Timer2 overflow interrupt
ISR(TIMER2_OVF_vect)
{
  // Increment the timerCount variable
  timerCount++;
  
  // Toggle every half a second (~0.5 seconds)
  if (timerCount >= 488)
  {
    PORTB ^= (1 << PORTB5);
    // Reset the timerCount variable
    timerCount = 0;
  }
}

void loop()
{
  // Nothing to do here since all timing and pin toggling is handled by the Timer2 overflow interrupt
}
